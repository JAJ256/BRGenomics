% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deseq_functions.R
\name{getDESeqDataSet}
\alias{getDESeqDataSet}
\title{Get DESeqDataSet objects for downstream analysis}
\usage{
getDESeqDataSet(
  dataset.list,
  regions.gr,
  sample_names = NULL,
  gene_names = NULL,
  sizeFactors = NULL,
  field = "score",
  blacklist = NULL,
  expand_ranges = FALSE,
  ncores = detectCores(),
  quiet = FALSE
)
}
\arguments{
\item{dataset.list}{An object containing GRanges datasets that can be passed
to \code{\link[BRGenomics:getCountsByRegions]{getCountsByRegions}},
typically a list of GRanges objects, or a
\code{\link[BRGenomics:mergeGRangesData]{ multiplexed GRanges}} object (see
details below).}

\item{regions.gr}{A GRanges object containing regions of interest.}

\item{sample_names}{Names for each dataset in \code{dataset.list} are
required. By default (\code{sample_names = NULL}), if \code{dataset.list}
is a list, the names of the list elements are used; for a multiplexed
GRanges object, the field names are used. The names must each contain the
string "_rep#", where "#" is a single character (usually a number)
indicating the replicate. Sample names across different replicates must be
otherwise identical.}

\item{gene_names}{An optional character vector giving gene names, or any
other identifier over which reads should be counted. Gene names are
required if counting is to be performed over non-contiguous ranges, i.e. if
any genes have multiple ranges. If supplied, gene names are added to the
resulting \code{DESeqDataSet} object.}

\item{sizeFactors}{DESeq2 \code{sizeFactors} can be optionally applied in to
the \code{DESeqDataSet} object in this function, or they can be applied
later on, either by the user or in a call to \code{getDESeqResults}.
Applying the \code{sizeFactors} later is useful if multiple sets of factors
will be explored, although \code{sizeFactors} can be overwritten at any
time. Note that DESeq2 \code{sizeFactors} are \emph{not} the same as
normalization factors defined elsewhere in this package. See details below.}

\item{field}{Argument passed to \code{getCountsByRegions}. Can be used to
specify fields in a single multiplexed GRanges object, or individual fields
for each GRanges object in \code{dataset.list}.}

\item{blacklist}{An optional GRanges object containing regions that should be
excluded from signal counting. Use of this argument is distinct from the
use of non-contiguous gene regions (see details below), and the two can be
used simultaneously. Blacklisting doesn't affect the ranges returned as
rowRanges in the output DESeqDataSet object (unlike the use of
non-contiguous regions).}

\item{expand_ranges}{Logical indicating if ranges in \code{dataset.gr} should
be treated as descriptions of single molecules (\code{FALSE}), or if ranges
should be treated as representing multiple adjacent positions with the same
signal (\code{TRUE}). See \code{\link[BRGenomics:getCountsByRegions]{
getCountsByRegions}}.}

\item{ncores}{Number of cores to use for read counting across all samples. By
default, all available cores are used.}

\item{quiet}{If \code{TRUE}, all output messages from call to
\code{\link[DESeq2:DESeqDataSet]{DESeqDataSet}} will be suppressed.}
}
\value{
A \code{DESeqData} object in which \code{rowData} are given as
  \code{rowRanges}, which are equivalent to \code{regions.gr}, unless there
  are non-contiguous gene regions (see note below). Samples (as seen in
  \code{colData}) are factored so that samples are grouped by
  \code{replicate} and \code{condition}, i.e. all non-replicate samples are
  treated as distinct, and the DESeq2 design = \code{~condition}.
}
\description{
This is a convenience function for generating \code{DESeqDataSet} objects,
but this function also adds support for counting reads across non-contiguous
regions.
}
\section{Use of non-contiguous gene regions}{
 In DESeq2, genes must be defined
  by single, contiguous chromosomal locations. In contrast, this function
  allows individual genes to be encompassed by multiple distinct ranges in
  \code{regions.gr}. To use non-contiguous gene regions, provide
  \code{gene_names} in which some names are duplicated. For each unique gene
  in \code{gene_names}, this function will generate counts across all ranges
  for that gene, but be aware that it will only keep the largest range for
  each gene in the resulting \code{DESeqDataSet} object's \code{rowRanges}.
  If the desired use is to blacklist certain sites in a genelist, note that
  the \code{blacklist} argument can be used.
}

\section{A note on DESeq2 sizeFactors}{
 DESeq2 \code{sizeFactors} are
  sample-specific normalization factors that are applied by division, i.e.
  \eqn{counts_{norm,i}=counts_i / sizeFactor_i}{normcounts_i = counts_i /
  sizeFactor_i}. This is in contrast to normalization factors as defined in
  this package (and commonly elsewhere), which are applied by multiplication.
  Also note that DESeq2's "\code{normalizationFactors}" are not sample
  specific, but rather gene specific factors used to correct for
  ascertainment bias across different genes (e.g. as might be relevant for
  GSEA or Go analysis).
}

\section{On gene names and unexpected errors}{
 Certain gene names can cause
this function to return an error. We've never encountered errors using
conventional, systematic naming schemes (e.g. ensembl IDs), but we have
seen errors when using Drosophila (Flybase) "symbols". We expect this is due
to the unconventional use of non-alphanumeric characters in some Drosophila
gene names.
}

\examples{
suppressPackageStartupMessages(require(DESeq2))
data("PROseq") # import included PROseq data
data("txs_dm6_chr4") # import included transcripts

# divide PROseq data into 6 toy datasets
ps_a_rep1 <- PROseq[seq(1, length(PROseq), 6)]
ps_b_rep1 <- PROseq[seq(2, length(PROseq), 6)]
ps_c_rep1 <- PROseq[seq(3, length(PROseq), 6)]

ps_a_rep2 <- PROseq[seq(4, length(PROseq), 6)]
ps_b_rep2 <- PROseq[seq(5, length(PROseq), 6)]
ps_c_rep2 <- PROseq[seq(6, length(PROseq), 6)]

ps_list <- list(A_rep1 = ps_a_rep1, A_rep2 = ps_a_rep2,
                B_rep1 = ps_b_rep1, B_rep2 = ps_b_rep2,
                C_rep1 = ps_c_rep1, C_rep2 = ps_c_rep2)

# make flawed dataset (ranges in txs_dm6_chr4 not disjoint)
#    this means there is double-counting
# also using discontinuous gene regions, as gene_ids are repeated
dds <- getDESeqDataSet(ps_list,
                       txs_dm6_chr4,
                       gene_names = txs_dm6_chr4$gene_id,
                       quiet = TRUE,
                       ncores = 1)
dds
}
\seealso{
\code{\link[DESeq2:DESeqDataSet]{DESeq2::DESeqDataSet}},
  \code{\link[BRGenomics:getDESeqResults]{getDESeqResults}}
}
\author{
Mike DeBerardine
}
