% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/signal_counting.R
\name{getPausingIndices}
\alias{getPausingIndices}
\title{Calculate pausing indices from user-supplied promoters & genebodies}
\usage{
getPausingIndices(
  dataset.gr,
  promoters.gr,
  genebodies.gr,
  field = "score",
  length.normalize = TRUE,
  remove.empty = FALSE,
  blacklist = NULL,
  melt = FALSE,
  region_names = NULL,
  expand_ranges = FALSE,
  ncores = detectCores()
)
}
\arguments{
\item{dataset.gr}{A GRanges object in which signal is contained in metadata
(typically in the "score" field), or a named list of such GRanges objects.}

\item{promoters.gr}{A GRanges object containing promoter-proximal regions of
interest.}

\item{genebodies.gr}{A GRanges object containing genebody regions of
interest.}

\item{field}{The metadata field of \code{dataset.gr} to be counted. If
\code{length(field) > 1}, a dataframe is returned containing the pausing
indices for each region in each field. If \code{field} not found in
\code{names(mcols(dataset.gr))}, will default to using all fields found in
\code{dataset.gr}. If \code{dataset.gr} is a list, a single \code{field}
should be given, or \code{length(field)} should be the equal to the number
of datasets in \code{dataset.gr}.}

\item{length.normalize}{A logical indicating if signal counts within regions
of interest should be length normalized. The default is \code{TRUE}, which
is recommended, especially if input regions don't all have the same width.}

\item{remove.empty}{A logical indicating if genes without any signal in
\code{promoters.gr} should be removed. No genes are filtered by default. If
\code{dataset.gr} is a list of datasets, or if \code{length(field) > 1},
regions are filtered unless they have promoter signal in all datasets.}

\item{blacklist}{An optional GRanges object containing regions that should be
excluded from signal counting. If \code{length.normalize = TRUE},
blacklisted positions will be excluded from length calculations. Users
should take care to note if regions of interest substantially overlap
blacklisted positions.}

\item{melt}{If \code{melt = TRUE}, a dataframe is returned containing a
column for regions and another column for pausing indices. If multiple
datasets are given (if \code{dataset.gr} is a list or if
\code{length(field) > 1}), the output dataframe is melted to contain a
third column indicating the sample names. (See section on return values
below).}

\item{region_names}{If \code{melt = TRUE}, an optional vector of names for
the regions in \code{regions.gr}. If left as \code{NULL}, indices of
\code{regions.gr} are used instead.}

\item{expand_ranges}{Logical indicating if ranges in \code{dataset.gr} should
be treated as descriptions of single molecules (\code{FALSE}), or if ranges
should be treated as representing multiple adjacent positions with the same
signal (\code{TRUE}). See \code{\link[BRGenomics:getCountsByRegions]{
getCountsByRegions/getCoverageByRegions}}.}

\item{ncores}{Multiple cores will only be used if \code{dataset.gr} is a list
of multiple datasets, or if \code{length(field) > 1}.}
}
\value{
A vector parallel to the input genelist, unless \code{remove.empty =
  TRUE}, in which case the vector may be shorter. If \code{dataset.gr} is a
  list, or if \code{length(field) > 1}, a dataframe is returned, containing a
  column for each field. However, if \code{melt = TRUE}, dataframes contain
  one column to indicate regions (either by their indices, or by
  \code{region_names}, if given), another column to indicate signal, and a
  third column containing the sample name (unless \code{dataset.gr} is a
  single GRanges object).
}
\description{
Pausing index (PI) is calculated for each gene (within matched
\code{promoters.gr} and \code{genebodies.gr}) as promoter-proximal (or pause
region) signal counts divided by genebody signal counts. If
\code{length.normalize = TRUE} (recommended), the signal counts within each
range in \code{promoters.gr} and \code{genebodies.gr} are divided by their
respective range widths (region lengths) before pausing indices are
calculated.
}
\examples{
data("PROseq") # load included PROseq data
data("txs_dm6_chr4") # load included transcripts

#--------------------------------------------------#
# Get promoter-proximal and genebody regions
#--------------------------------------------------#

# genebodies from +300 to 300 bp before the poly-A site
gb <- genebodies(txs_dm6_chr4, 300, -300, min.window = 400)

# get the transcripts that are large enough (>1kb in size)
txs <- subset(txs_dm6_chr4, tx_name \%in\% gb$tx_name)

# for the same transcripts, promoter-proximal region from 0 to +100
pr <- promoters(txs, 0, 100)

#--------------------------------------------------#
# Calculate pausing indices
#--------------------------------------------------#

pidx <- getPausingIndices(PROseq, pr, gb)

length(txs)
length(pidx)
head(pidx)

#--------------------------------------------------#
# Without length normalization
#--------------------------------------------------#

head( getPausingIndices(PROseq, pr, gb, length.normalize = FALSE) )

#--------------------------------------------------#
# Removing empty means the values no longer match the genelist
#--------------------------------------------------#

pidx_signal <- getPausingIndices(PROseq, pr, gb, remove.empty = TRUE)

length(pidx_signal)
}
\seealso{
\code{\link[BRGenomics:getCountsByRegions]{getCountsByRegions}}
}
\author{
Mike DeBerardine
}
